# React Native Android Build → Upload to Revyl → Test Pipeline
#
# This workflow demonstrates how to:
# 1. Build an Android APK with React Native
# 2. Upload the APK to Revyl build system
# 3. Optionally run tests on the uploaded build
#
# Perfect for React Native Android projects that want automated CI/CD testing

name: React Native Android Build and Upload to Revyl

on:
  # Trigger on pushes to main branch
  push:
    branches: [main]
  # Trigger on pull requests
  pull_request:
    branches: [main]
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: read

jobs:
  android-build:
    runs-on: ubuntu-latest

    # Environment variables - customize these for your project
    env:
      # 🔑 REQUIRED: Set these in your GitHub repository secrets
      REVYL_API_KEY: ${{ secrets.REVYL_API_KEY }} # Get from: https://auth.revyl.ai/account/api_keys

      # 🏗️ REQUIRED: Replace with your Revyl build variable ID
      # Get this from your Revyl dashboard when you create a build variable
      BUILD_VAR_ID: 'your-build-variable-id-here'

      # 📱 OPTIONAL: Replace with your test ID if you want to run tests after upload
      TEST_ID: 'your-test-id-here'

      # 🏷️ Dynamic version naming - automatically includes PR/branch info
      VERSION:
        ${{ github.event_name == 'pull_request' && format('pr-{0}-{1}-{2}',
        github.event.number, github.run_number, github.run_attempt) ||
        format('{0}-{1}-{2}', github.ref_name, github.run_number,
        github.run_attempt) }}

    steps:
      # Step 1: Get your source code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Get the Revyl Actions (if using cross-repo)
      # If your workflow is in the same repo as revyl-gh-action, skip this step
      - name: 📥 Checkout Revyl Actions
        uses: actions/checkout@v4
        with:
          repository: RevylAI/revyl-gh-action
          path: revyl-actions

      # Step 3: Setup Node.js environment
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: npm
          # 📝 UPDATE: Change this path to your package-lock.json location
          cache-dependency-path: package-lock.json

      # Step 4: Setup Java for Android builds
      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 5: Setup Android SDK
      - name: 🤖 Setup Android SDK
        uses: android-actions/setup-android@v3

      # Step 6: Install your app's dependencies
      - name: 📦 Install Dependencies
        run: npm ci
        # 📝 If your package.json is in a subdirectory, add:
        # working-directory: path/to/your/react-native/app

      # Step 7: Cache Gradle dependencies (speeds up builds)
      - name: 📦 Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key:
            ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*',
            '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 8: Make gradlew executable
      - name: 🔧 Make Gradlew Executable
        run: chmod +x ./android/gradlew
        # 📝 If your android folder is elsewhere, update the path

      # Step 9: Build Android APK (this is where the magic happens! ✨)
      - name: 🤖 Build Android APK
        run: |
          echo "🤖 Building Android APK..."
          echo "⏱️  This usually takes 5-10 minutes"

          cd android
          ./gradlew assembleRelease

          echo "✅ APK build completed!"

          # Verify the APK was created
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "❌ APK not found at expected location: $APK_PATH"
            echo "📁 Listing build outputs:"
            find app/build/outputs -name "*.apk" -type f
            exit 1
          fi

          echo "📱 APK created successfully at: $APK_PATH"
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
        # 📝 If your android folder is elsewhere, update the working-directory

      # Step 10: Upload to Revyl (the main event! 🎉)
      - name: ⬆️ Upload APK to Revyl
        id: upload-build
        uses: ./revyl-actions/actions/upload-build
        # 📝 If using cross-repo: RevylAI/revyl-gh-action/actions/upload-build@main
        with:
          build-var-id: ${{ env.BUILD_VAR_ID }}
          version: ${{ env.VERSION }}
          file-path: ./android/${{ env.APK_PATH }}

        # What this step does:
        # ✅ Uploads your APK file to Revyl
        # ✅ Extracts package ID from APK manifest
        # ✅ Adds CI/CD metadata automatically
        # ✅ Returns version-id for use in testing

      # Step 11: Show upload results
      - name: 📊 Display Upload Results
        if: always()
        run: |
          echo "## 📊 Build Upload Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.upload-build.outputs.success }}" = "true" ]; then
            echo "✅ **Upload Status:** Success" >> $GITHUB_STEP_SUMMARY
            echo "🆔 **Version ID:** ${{ steps.upload-build.outputs.version-id }}" >> $GITHUB_STEP_SUMMARY
            echo "📱 **Package ID:** ${{ steps.upload-build.outputs.package-id }}" >> $GITHUB_STEP_SUMMARY
            echo "🏷️ **Version:** ${{ steps.upload-build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "⏱️ **Upload Time:** ${{ steps.upload-build.outputs.upload-time }}s" >> $GITHUB_STEP_SUMMARY
            echo "📦 **APK Size:** $(du -h ./android/${{ env.APK_PATH }} | cut -f1)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Upload Status:** Failed" >> $GITHUB_STEP_SUMMARY
            echo "🚨 **Error:** ${{ steps.upload-build.outputs.error-message }}" >> $GITHUB_STEP_SUMMARY
          fi

      # Step 12: OPTIONAL - Run tests on the uploaded build
      - name: 🧪 Run Tests on Uploaded Build
        id: run-tests
        if:
          steps.upload-build.outputs.success == 'true' && env.TEST_ID !=
          'your-test-id-here'
        uses: ./revyl-actions/actions/run-test
        # 📝 If using cross-repo: RevylAI/revyl-gh-action/actions/run-test@main
        with:
          test-id: ${{ env.TEST_ID }}
          build-version-id: ${{ steps.upload-build.outputs.version-id }}
          timeout: 3600 # 1 hour timeout

        # This step will:
        # ✅ Run your Revyl test using the exact APK we just uploaded
        # ✅ Provide real-time progress updates
        # ✅ Generate a shareable test report

      # Step 13: OPTIONAL - Show test results
      - name: 📋 Display Test Results
        if: steps.run-tests.conclusion != 'skipped'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.run-tests.outputs.success }}" = "true" ]; then
            echo "✅ **Test Status:** Passed" >> $GITHUB_STEP_SUMMARY
            echo "⏱️ **Execution Time:** ${{ steps.run-tests.outputs.execution_time }}s" >> $GITHUB_STEP_SUMMARY
            echo "📱 **Platform:** ${{ steps.run-tests.outputs.platform }}" >> $GITHUB_STEP_SUMMARY
            echo "📊 **Report:** [View Test Report](${{ steps.run-tests.outputs.report_link }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Test Status:** Failed" >> $GITHUB_STEP_SUMMARY
            echo "🚨 **Error:** ${{ steps.run-tests.outputs.error_message }}" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ steps.run-tests.outputs.report_link }}" ]; then
              echo "📊 **Report:** [View Test Report](${{ steps.run-tests.outputs.report_link }})" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      # Step 14: OPTIONAL - Post results to PR (if this is a PR build)
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const uploadSuccess = '${{ steps.upload-build.outputs.success }}' === 'true';
            const testRan = '${{ steps.run-tests.conclusion }}' !== 'skipped';
            const testSuccess = '${{ steps.run-tests.outputs.success }}' === 'true';

            let comment = '## 🤖 Android Build Results\n\n';

            if (uploadSuccess) {
              comment += '✅ **APK uploaded successfully to Revyl**\n';
              comment += `- Version: \`${{ steps.upload-build.outputs.version }}\`\n`;
              comment += `- Package ID: \`${{ steps.upload-build.outputs.package-id }}\`\n`;
              
              if (testRan) {
                comment += '\n## 🧪 Test Results\n\n';
                if (testSuccess) {
                  comment += '✅ **Tests passed**\n';
                  comment += `- Execution time: ${{ steps.run-tests.outputs.execution_time }}s\n`;
                  comment += `- [📊 View detailed report](${{ steps.run-tests.outputs.report_link }})\n`;
                } else {
                  comment += '❌ **Tests failed**\n';
                  if ('${{ steps.run-tests.outputs.report_link }}') {
                    comment += `- [📊 View failure report](${{ steps.run-tests.outputs.report_link }})\n`;
                  }
                }
              }
            } else {
              comment += '❌ **APK upload failed**\n';
              comment += `- Error: ${{ steps.upload-build.outputs.error-message }}\n`;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
