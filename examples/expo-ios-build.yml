# Expo iOS Build → Upload to Revyl → Test Pipeline
#
# This workflow demonstrates how to:
# 1. Build an iOS .app with Expo EAS
# 2. Upload the build to Revyl build system
# 3. Optionally run tests on the uploaded build
#
# Perfect for Expo/React Native iOS projects that want automated CI/CD testing

name: Expo iOS Build and Upload to Revyl

on:
  # Trigger on pushes to main branch (Feel free to change these however you want!)
  push:
    branches: [main]
  # Trigger on pull requests
  pull_request:
    branches: [main]
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: read

jobs:
  expo-ios-build:
    runs-on: ubuntu-latest

    # Environment variables - customize these for your project
    env:
      # 🔑 REQUIRED: Set these in your GitHub repository secrets
      REVYL_API_KEY: ${{ secrets.REVYL_API_KEY }} # Get from: https://auth.revyl.ai/account/api_keys
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }} # Get from: https://expo.dev/accounts/[username]/settings/access-tokens

      # 🏗️ REQUIRED: Replace with your Revyl build variable ID
      # Get this from your Revyl dashboard when you create a build variable
      BUILD_VAR_ID: 'your-build-variable-id-here'

      # 📱 OPTIONAL: Replace with your test ID if you want to run tests after upload
      TEST_ID: 'your-test-id-here'

      # 🏷️ Dynamic version naming - automatically includes PR/branch info
      VERSION:
        ${{ github.event_name == 'pull_request' && format('pr-{0}-{1}-{2}',
        github.event.number, github.run_number, github.run_attempt) ||
        format('{0}-{1}-{2}', github.ref_name, github.run_number,
        github.run_attempt) }}

    steps:
      # Step 1: Get your source code
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Get the Revyl Actions (if using cross-repo)
      # If your workflow is in the same repo as revyl-gh-action, skip this step
      - name: 📥 Checkout Revyl Actions
        uses: actions/checkout@v4
        with:
          repository: RevylAI/revyl-gh-action
          path: revyl-actions

      # Step 3: Setup Node.js environment
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: npm
          # 📝 UPDATE: Change this path to your package-lock.json location
          cache-dependency-path: package-lock.json

      # Step 4: Setup Expo/EAS CLI
      - name: 🚀 Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      # Step 5: Install your app's dependencies
      - name: 📦 Install Dependencies
        run: npm ci
        # 📝 If your package.json is in a subdirectory, add:
        # working-directory: path/to/your/expo/app

      # Step 6: Build iOS .app with EAS (this is the magic! ✨)
      - name: 🍎 Build iOS .app with EAS
        id: eas-build
        run: |
          echo "🍎 Starting iOS build with EAS (this takes 15-20 minutes)..."
          echo "⏱️  Perfect time for a coffee break! ☕"

          # Build with EAS and capture JSON output
          # 📝 UPDATE: Change --profile if you use a different EAS build profile
          BUILD_JSON=$(eas build --platform ios --profile preview --non-interactive --wait --json)

          echo "✅ Build completed! Extracting download URL..."

          # Extract the build download URL from EAS response
          BUILD_URL=$(echo "$BUILD_JSON" | jq -r '.[0].artifacts.buildUrl')

          if [ "$BUILD_URL" = "null" ] || [ -z "$BUILD_URL" ]; then
            echo "❌ Failed to get build URL from EAS"
            echo "EAS Response: $BUILD_JSON"
            exit 1
          fi

          echo "🔗 Build URL: $BUILD_URL"
          echo "BUILD_URL=$BUILD_URL" >> $GITHUB_ENV
        # 📝 If your package.json is in a subdirectory, add:
        # working-directory: path/to/your/expo/app

      # Step 7: Upload to Revyl (the main event! 🎉)
      - name: ⬆️ Upload Build to Revyl
        id: upload-build
        uses: ./revyl-actions/actions/upload-build
        # 📝 If using cross-repo: RevylAI/revyl-gh-action/actions/upload-build@main
        with:
          build-var-id: ${{ env.BUILD_VAR_ID }}
          version: ${{ env.VERSION }}
          expo-url: ${{ env.BUILD_URL }}
          expo-headers: '{"Authorization": "Bearer ${{ secrets.EXPO_TOKEN }}"}'

        # What this step does:
        # ✅ Downloads the .tar.gz file from Expo
        # ✅ Automatically converts it to .zip format
        # ✅ Extracts package ID (bundle identifier)
        # ✅ Uploads to Revyl with CI/CD metadata
        # ✅ Returns version-id for use in testing

      # Step 8: Show upload results
      - name: 📊 Display Upload Results
        if: always()
        run: |
          echo "## 📊 Build Upload Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.upload-build.outputs.success }}" = "true" ]; then
            echo "✅ **Upload Status:** Success" >> $GITHUB_STEP_SUMMARY
            echo "🆔 **Version ID:** ${{ steps.upload-build.outputs.version-id }}" >> $GITHUB_STEP_SUMMARY
            echo "📱 **Package ID:** ${{ steps.upload-build.outputs.package-id }}" >> $GITHUB_STEP_SUMMARY
            echo "🏷️ **Version:** ${{ steps.upload-build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "⏱️ **Upload Time:** ${{ steps.upload-build.outputs.upload-time }}s" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Upload Status:** Failed" >> $GITHUB_STEP_SUMMARY
            echo "🚨 **Error:** ${{ steps.upload-build.outputs.error-message }}" >> $GITHUB_STEP_SUMMARY
          fi

